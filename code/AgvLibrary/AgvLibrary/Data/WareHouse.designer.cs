#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace AgvLibrary.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WareHouseTest")]
	public partial class AgvWareHouseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertDeal(Deal instance);
    partial void UpdateDeal(Deal instance);
    partial void DeleteDeal(Deal instance);
    partial void InsertItemOnDeal(ItemOnDeal instance);
    partial void UpdateItemOnDeal(ItemOnDeal instance);
    partial void DeleteItemOnDeal(ItemOnDeal instance);
    partial void InsertPart(Part instance);
    partial void UpdatePart(Part instance);
    partial void DeletePart(Part instance);
    partial void InsertPosation(Posation instance);
    partial void UpdatePosation(Posation instance);
    partial void DeletePosation(Posation instance);
    partial void InsertRecord(Record instance);
    partial void UpdateRecord(Record instance);
    partial void DeleteRecord(Record instance);
    partial void InsertStorage(Storage instance);
    partial void UpdateStorage(Storage instance);
    partial void DeleteStorage(Storage instance);
    partial void InsertUniqueItem(UniqueItem instance);
    partial void UpdateUniqueItem(UniqueItem instance);
    partial void DeleteUniqueItem(UniqueItem instance);
    partial void InsertWareHouse(WareHouse instance);
    partial void UpdateWareHouse(WareHouse instance);
    partial void DeleteWareHouse(WareHouse instance);
    #endregion
		
		public AgvWareHouseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AgvWareHouseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AgvWareHouseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AgvWareHouseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Deal> Deal
		{
			get
			{
				return this.GetTable<Deal>();
			}
		}
		
		public System.Data.Linq.Table<ItemOnDeal> ItemOnDeal
		{
			get
			{
				return this.GetTable<ItemOnDeal>();
			}
		}
		
		public System.Data.Linq.Table<Part> Part
		{
			get
			{
				return this.GetTable<Part>();
			}
		}
		
		public System.Data.Linq.Table<Posation> Posation
		{
			get
			{
				return this.GetTable<Posation>();
			}
		}
		
		public System.Data.Linq.Table<Record> Record
		{
			get
			{
				return this.GetTable<Record>();
			}
		}
		
		public System.Data.Linq.Table<Storage> Storage
		{
			get
			{
				return this.GetTable<Storage>();
			}
		}
		
		public System.Data.Linq.Table<UniqueItem> UniqueItem
		{
			get
			{
				return this.GetTable<UniqueItem>();
			}
		}
		
		public System.Data.Linq.Table<WareHouse> WareHouse
		{
			get
			{
				return this.GetTable<WareHouse>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Deal")]
	public partial class Deal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _DealNr;
		
		private string _Dlivery;
		
		private string _Operator;
		
		private string _Data;
		
		private EntitySet<ItemOnDeal> _ItemOnDeal;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDealNrChanging(string value);
    partial void OnDealNrChanged();
    partial void OnDliveryChanging(string value);
    partial void OnDliveryChanged();
    partial void OnOperatorChanging(string value);
    partial void OnOperatorChanged();
    partial void OnDataChanging(string value);
    partial void OnDataChanged();
    #endregion
		
		public Deal()
		{
			this._ItemOnDeal = new EntitySet<ItemOnDeal>(new Action<ItemOnDeal>(this.attach_ItemOnDeal), new Action<ItemOnDeal>(this.detach_ItemOnDeal));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealNr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string DealNr
		{
			get
			{
				return this._DealNr;
			}
			set
			{
				if ((this._DealNr != value))
				{
					this.OnDealNrChanging(value);
					this.SendPropertyChanging();
					this._DealNr = value;
					this.SendPropertyChanged("DealNr");
					this.OnDealNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dlivery", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Dlivery
		{
			get
			{
				return this._Dlivery;
			}
			set
			{
				if ((this._Dlivery != value))
				{
					this.OnDliveryChanging(value);
					this.SendPropertyChanging();
					this._Dlivery = value;
					this.SendPropertyChanged("Dlivery");
					this.OnDliveryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operator", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operator
		{
			get
			{
				return this._Operator;
			}
			set
			{
				if ((this._Operator != value))
				{
					this.OnOperatorChanging(value);
					this.SendPropertyChanging();
					this._Operator = value;
					this.SendPropertyChanged("Operator");
					this.OnOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Data", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Data
		{
			get
			{
				return this._Data;
			}
			set
			{
				if ((this._Data != value))
				{
					this.OnDataChanging(value);
					this.SendPropertyChanging();
					this._Data = value;
					this.SendPropertyChanged("Data");
					this.OnDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deal_ItemOnDeal", Storage="_ItemOnDeal", ThisKey="DealNr", OtherKey="DealNr")]
		public EntitySet<ItemOnDeal> ItemOnDeal
		{
			get
			{
				return this._ItemOnDeal;
			}
			set
			{
				this._ItemOnDeal.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ItemOnDeal(ItemOnDeal entity)
		{
			this.SendPropertyChanging();
			entity.Deal = this;
		}
		
		private void detach_ItemOnDeal(ItemOnDeal entity)
		{
			this.SendPropertyChanging();
			entity.Deal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ItemOnDeal")]
	public partial class ItemOnDeal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemNr;
		
		private string _DealNr;
		
		private EntityRef<Deal> _Deal;
		
		private EntityRef<UniqueItem> _UniqueItem;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemNrChanging(int value);
    partial void OnItemNrChanged();
    partial void OnDealNrChanging(string value);
    partial void OnDealNrChanged();
    #endregion
		
		public ItemOnDeal()
		{
			this._Deal = default(EntityRef<Deal>);
			this._UniqueItem = default(EntityRef<UniqueItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNr", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemNr
		{
			get
			{
				return this._ItemNr;
			}
			set
			{
				if ((this._ItemNr != value))
				{
					if (this._UniqueItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemNrChanging(value);
					this.SendPropertyChanging();
					this._ItemNr = value;
					this.SendPropertyChanged("ItemNr");
					this.OnItemNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DealNr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string DealNr
		{
			get
			{
				return this._DealNr;
			}
			set
			{
				if ((this._DealNr != value))
				{
					if (this._Deal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDealNrChanging(value);
					this.SendPropertyChanging();
					this._DealNr = value;
					this.SendPropertyChanged("DealNr");
					this.OnDealNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Deal_ItemOnDeal", Storage="_Deal", ThisKey="DealNr", OtherKey="DealNr", IsForeignKey=true)]
		public Deal Deal
		{
			get
			{
				return this._Deal.Entity;
			}
			set
			{
				Deal previousValue = this._Deal.Entity;
				if (((previousValue != value) 
							|| (this._Deal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Deal.Entity = null;
						previousValue.ItemOnDeal.Remove(this);
					}
					this._Deal.Entity = value;
					if ((value != null))
					{
						value.ItemOnDeal.Add(this);
						this._DealNr = value.DealNr;
					}
					else
					{
						this._DealNr = default(string);
					}
					this.SendPropertyChanged("Deal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UniqueItem_ItemOnDeal", Storage="_UniqueItem", ThisKey="ItemNr", OtherKey="ItemUnique", IsForeignKey=true)]
		public UniqueItem UniqueItem
		{
			get
			{
				return this._UniqueItem.Entity;
			}
			set
			{
				UniqueItem previousValue = this._UniqueItem.Entity;
				if (((previousValue != value) 
							|| (this._UniqueItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UniqueItem.Entity = null;
						previousValue.ItemOnDeal = null;
					}
					this._UniqueItem.Entity = value;
					if ((value != null))
					{
						value.ItemOnDeal = this;
						this._ItemNr = value.ItemUnique;
					}
					else
					{
						this._ItemNr = default(int);
					}
					this.SendPropertyChanged("UniqueItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Part")]
	public partial class Part : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PartNr;
		
		private EntitySet<Storage> _Storage;
		
		private EntitySet<UniqueItem> _UniqueItem;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPartNrChanging(string value);
    partial void OnPartNrChanged();
    #endregion
		
		public Part()
		{
			this._Storage = new EntitySet<Storage>(new Action<Storage>(this.attach_Storage), new Action<Storage>(this.detach_Storage));
			this._UniqueItem = new EntitySet<UniqueItem>(new Action<UniqueItem>(this.attach_UniqueItem), new Action<UniqueItem>(this.detach_UniqueItem));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PartNr
		{
			get
			{
				return this._PartNr;
			}
			set
			{
				if ((this._PartNr != value))
				{
					this.OnPartNrChanging(value);
					this.SendPropertyChanging();
					this._PartNr = value;
					this.SendPropertyChanged("PartNr");
					this.OnPartNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Storage", Storage="_Storage", ThisKey="PartNr", OtherKey="PartNr")]
		public EntitySet<Storage> Storage
		{
			get
			{
				return this._Storage;
			}
			set
			{
				this._Storage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_UniqueItem", Storage="_UniqueItem", ThisKey="PartNr", OtherKey="PartNr")]
		public EntitySet<UniqueItem> UniqueItem
		{
			get
			{
				return this._UniqueItem;
			}
			set
			{
				this._UniqueItem.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Storage(Storage entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_Storage(Storage entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
		
		private void attach_UniqueItem(UniqueItem entity)
		{
			this.SendPropertyChanging();
			entity.Part = this;
		}
		
		private void detach_UniqueItem(UniqueItem entity)
		{
			this.SendPropertyChanging();
			entity.Part = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Posation")]
	public partial class Posation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PosationNr;
		
		private string _WHNr;
		
		private int _Floor;
		
		private int _Row;
		
		private int _Coloumn;
		
		private EntityRef<Storage> _Storage;
		
		private EntityRef<WareHouse> _WareHouse;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPosationNrChanging(string value);
    partial void OnPosationNrChanged();
    partial void OnWHNrChanging(string value);
    partial void OnWHNrChanged();
    partial void OnFloorChanging(int value);
    partial void OnFloorChanged();
    partial void OnRowChanging(int value);
    partial void OnRowChanged();
    partial void OnColoumnChanging(int value);
    partial void OnColoumnChanged();
    #endregion
		
		public Posation()
		{
			this._Storage = default(EntityRef<Storage>);
			this._WareHouse = default(EntityRef<WareHouse>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosationNr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PosationNr
		{
			get
			{
				return this._PosationNr;
			}
			set
			{
				if ((this._PosationNr != value))
				{
					this.OnPosationNrChanging(value);
					this.SendPropertyChanging();
					this._PosationNr = value;
					this.SendPropertyChanged("PosationNr");
					this.OnPosationNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WHNr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string WHNr
		{
			get
			{
				return this._WHNr;
			}
			set
			{
				if ((this._WHNr != value))
				{
					if (this._WareHouse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWHNrChanging(value);
					this.SendPropertyChanging();
					this._WHNr = value;
					this.SendPropertyChanged("WHNr");
					this.OnWHNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Floor", DbType="Int NOT NULL")]
		public int Floor
		{
			get
			{
				return this._Floor;
			}
			set
			{
				if ((this._Floor != value))
				{
					this.OnFloorChanging(value);
					this.SendPropertyChanging();
					this._Floor = value;
					this.SendPropertyChanged("Floor");
					this.OnFloorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Row", DbType="Int NOT NULL")]
		public int Row
		{
			get
			{
				return this._Row;
			}
			set
			{
				if ((this._Row != value))
				{
					this.OnRowChanging(value);
					this.SendPropertyChanging();
					this._Row = value;
					this.SendPropertyChanged("Row");
					this.OnRowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coloumn", DbType="Int NOT NULL")]
		public int Coloumn
		{
			get
			{
				return this._Coloumn;
			}
			set
			{
				if ((this._Coloumn != value))
				{
					this.OnColoumnChanging(value);
					this.SendPropertyChanging();
					this._Coloumn = value;
					this.SendPropertyChanged("Coloumn");
					this.OnColoumnChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Posation_Storage", Storage="_Storage", ThisKey="PosationNr", OtherKey="PosationNr", IsUnique=true, IsForeignKey=false)]
		public Storage Storage
		{
			get
			{
				return this._Storage.Entity;
			}
			set
			{
				Storage previousValue = this._Storage.Entity;
				if (((previousValue != value) 
							|| (this._Storage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Storage.Entity = null;
						previousValue.Posation = null;
					}
					this._Storage.Entity = value;
					if ((value != null))
					{
						value.Posation = this;
					}
					this.SendPropertyChanged("Storage");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_Posation", Storage="_WareHouse", ThisKey="WHNr", OtherKey="WHNr", IsForeignKey=true)]
		public WareHouse WareHouse
		{
			get
			{
				return this._WareHouse.Entity;
			}
			set
			{
				WareHouse previousValue = this._WareHouse.Entity;
				if (((previousValue != value) 
							|| (this._WareHouse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._WareHouse.Entity = null;
						previousValue.Posation.Remove(this);
					}
					this._WareHouse.Entity = value;
					if ((value != null))
					{
						value.Posation.Add(this);
						this._WHNr = value.WHNr;
					}
					else
					{
						this._WHNr = default(string);
					}
					this.SendPropertyChanged("WareHouse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Record")]
	public partial class Record : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MovementId;
		
		private string _SourcePosation;
		
		private string _AimedPosation;
		
		private string _Operation;
		
		private string _Operator;
		
		private string _Time;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMovementIdChanging(int value);
    partial void OnMovementIdChanged();
    partial void OnSourcePosationChanging(string value);
    partial void OnSourcePosationChanged();
    partial void OnAimedPosationChanging(string value);
    partial void OnAimedPosationChanged();
    partial void OnOperationChanging(string value);
    partial void OnOperationChanged();
    partial void OnOperatorChanging(string value);
    partial void OnOperatorChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    #endregion
		
		public Record()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MovementId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MovementId
		{
			get
			{
				return this._MovementId;
			}
			set
			{
				if ((this._MovementId != value))
				{
					this.OnMovementIdChanging(value);
					this.SendPropertyChanging();
					this._MovementId = value;
					this.SendPropertyChanged("MovementId");
					this.OnMovementIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourcePosation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string SourcePosation
		{
			get
			{
				return this._SourcePosation;
			}
			set
			{
				if ((this._SourcePosation != value))
				{
					this.OnSourcePosationChanging(value);
					this.SendPropertyChanging();
					this._SourcePosation = value;
					this.SendPropertyChanged("SourcePosation");
					this.OnSourcePosationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AimedPosation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AimedPosation
		{
			get
			{
				return this._AimedPosation;
			}
			set
			{
				if ((this._AimedPosation != value))
				{
					this.OnAimedPosationChanging(value);
					this.SendPropertyChanging();
					this._AimedPosation = value;
					this.SendPropertyChanged("AimedPosation");
					this.OnAimedPosationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operation", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operation
		{
			get
			{
				return this._Operation;
			}
			set
			{
				if ((this._Operation != value))
				{
					this.OnOperationChanging(value);
					this.SendPropertyChanging();
					this._Operation = value;
					this.SendPropertyChanged("Operation");
					this.OnOperationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Operator", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Operator
		{
			get
			{
				return this._Operator;
			}
			set
			{
				if ((this._Operator != value))
				{
					this.OnOperatorChanging(value);
					this.SendPropertyChanging();
					this._Operator = value;
					this.SendPropertyChanged("Operator");
					this.OnOperatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Storage")]
	public partial class Storage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _PosationNr;
		
		private int _ItemNr;
		
		private string _PartNr;
		
		private string _FIFO;
		
		private EntityRef<UniqueItem> _UniqueItem;
		
		private EntityRef<Part> _Part;
		
		private EntityRef<Posation> _Posation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPosationNrChanging(string value);
    partial void OnPosationNrChanged();
    partial void OnItemNrChanging(int value);
    partial void OnItemNrChanged();
    partial void OnPartNrChanging(string value);
    partial void OnPartNrChanged();
    partial void OnFIFOChanging(string value);
    partial void OnFIFOChanged();
    #endregion
		
		public Storage()
		{
			this._UniqueItem = default(EntityRef<UniqueItem>);
			this._Part = default(EntityRef<Part>);
			this._Posation = default(EntityRef<Posation>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PosationNr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string PosationNr
		{
			get
			{
				return this._PosationNr;
			}
			set
			{
				if ((this._PosationNr != value))
				{
					if (this._Posation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPosationNrChanging(value);
					this.SendPropertyChanging();
					this._PosationNr = value;
					this.SendPropertyChanged("PosationNr");
					this.OnPosationNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemNr", DbType="Int NOT NULL")]
		public int ItemNr
		{
			get
			{
				return this._ItemNr;
			}
			set
			{
				if ((this._ItemNr != value))
				{
					if (this._UniqueItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemNrChanging(value);
					this.SendPropertyChanging();
					this._ItemNr = value;
					this.SendPropertyChanged("ItemNr");
					this.OnItemNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PartNr
		{
			get
			{
				return this._PartNr;
			}
			set
			{
				if ((this._PartNr != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartNrChanging(value);
					this.SendPropertyChanging();
					this._PartNr = value;
					this.SendPropertyChanged("PartNr");
					this.OnPartNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FIFO", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FIFO
		{
			get
			{
				return this._FIFO;
			}
			set
			{
				if ((this._FIFO != value))
				{
					this.OnFIFOChanging(value);
					this.SendPropertyChanging();
					this._FIFO = value;
					this.SendPropertyChanged("FIFO");
					this.OnFIFOChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UniqueItem_Storage", Storage="_UniqueItem", ThisKey="ItemNr", OtherKey="ItemUnique", IsForeignKey=true)]
		public UniqueItem UniqueItem
		{
			get
			{
				return this._UniqueItem.Entity;
			}
			set
			{
				UniqueItem previousValue = this._UniqueItem.Entity;
				if (((previousValue != value) 
							|| (this._UniqueItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UniqueItem.Entity = null;
						previousValue.Storage.Remove(this);
					}
					this._UniqueItem.Entity = value;
					if ((value != null))
					{
						value.Storage.Add(this);
						this._ItemNr = value.ItemUnique;
					}
					else
					{
						this._ItemNr = default(int);
					}
					this.SendPropertyChanged("UniqueItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_Storage", Storage="_Part", ThisKey="PartNr", OtherKey="PartNr", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.Storage.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.Storage.Add(this);
						this._PartNr = value.PartNr;
					}
					else
					{
						this._PartNr = default(string);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Posation_Storage", Storage="_Posation", ThisKey="PosationNr", OtherKey="PosationNr", IsForeignKey=true)]
		public Posation Posation
		{
			get
			{
				return this._Posation.Entity;
			}
			set
			{
				Posation previousValue = this._Posation.Entity;
				if (((previousValue != value) 
							|| (this._Posation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Posation.Entity = null;
						previousValue.Storage = null;
					}
					this._Posation.Entity = value;
					if ((value != null))
					{
						value.Storage = this;
						this._PosationNr = value.PosationNr;
					}
					else
					{
						this._PosationNr = default(string);
					}
					this.SendPropertyChanged("Posation");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UniqueItem")]
	public partial class UniqueItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ItemUnique;
		
		private string _PartNr;
		
		private string _CreateTime;
		
		private string _Status;
		
		private EntityRef<ItemOnDeal> _ItemOnDeal;
		
		private EntitySet<Storage> _Storage;
		
		private EntityRef<Part> _Part;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItemUniqueChanging(int value);
    partial void OnItemUniqueChanged();
    partial void OnPartNrChanging(string value);
    partial void OnPartNrChanged();
    partial void OnCreateTimeChanging(string value);
    partial void OnCreateTimeChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    #endregion
		
		public UniqueItem()
		{
			this._ItemOnDeal = default(EntityRef<ItemOnDeal>);
			this._Storage = new EntitySet<Storage>(new Action<Storage>(this.attach_Storage), new Action<Storage>(this.detach_Storage));
			this._Part = default(EntityRef<Part>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemUnique", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ItemUnique
		{
			get
			{
				return this._ItemUnique;
			}
			set
			{
				if ((this._ItemUnique != value))
				{
					this.OnItemUniqueChanging(value);
					this.SendPropertyChanging();
					this._ItemUnique = value;
					this.SendPropertyChanged("ItemUnique");
					this.OnItemUniqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PartNr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PartNr
		{
			get
			{
				return this._PartNr;
			}
			set
			{
				if ((this._PartNr != value))
				{
					if (this._Part.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPartNrChanging(value);
					this.SendPropertyChanging();
					this._PartNr = value;
					this.SendPropertyChanged("PartNr");
					this.OnPartNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreateTime", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CreateTime
		{
			get
			{
				return this._CreateTime;
			}
			set
			{
				if ((this._CreateTime != value))
				{
					this.OnCreateTimeChanging(value);
					this.SendPropertyChanging();
					this._CreateTime = value;
					this.SendPropertyChanged("CreateTime");
					this.OnCreateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UniqueItem_ItemOnDeal", Storage="_ItemOnDeal", ThisKey="ItemUnique", OtherKey="ItemNr", IsUnique=true, IsForeignKey=false)]
		public ItemOnDeal ItemOnDeal
		{
			get
			{
				return this._ItemOnDeal.Entity;
			}
			set
			{
				ItemOnDeal previousValue = this._ItemOnDeal.Entity;
				if (((previousValue != value) 
							|| (this._ItemOnDeal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ItemOnDeal.Entity = null;
						previousValue.UniqueItem = null;
					}
					this._ItemOnDeal.Entity = value;
					if ((value != null))
					{
						value.UniqueItem = this;
					}
					this.SendPropertyChanged("ItemOnDeal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UniqueItem_Storage", Storage="_Storage", ThisKey="ItemUnique", OtherKey="ItemNr")]
		public EntitySet<Storage> Storage
		{
			get
			{
				return this._Storage;
			}
			set
			{
				this._Storage.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Part_UniqueItem", Storage="_Part", ThisKey="PartNr", OtherKey="PartNr", IsForeignKey=true)]
		public Part Part
		{
			get
			{
				return this._Part.Entity;
			}
			set
			{
				Part previousValue = this._Part.Entity;
				if (((previousValue != value) 
							|| (this._Part.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Part.Entity = null;
						previousValue.UniqueItem.Remove(this);
					}
					this._Part.Entity = value;
					if ((value != null))
					{
						value.UniqueItem.Add(this);
						this._PartNr = value.PartNr;
					}
					else
					{
						this._PartNr = default(string);
					}
					this.SendPropertyChanged("Part");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Storage(Storage entity)
		{
			this.SendPropertyChanging();
			entity.UniqueItem = this;
		}
		
		private void detach_Storage(Storage entity)
		{
			this.SendPropertyChanging();
			entity.UniqueItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WareHouse")]
	public partial class WareHouse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AgvId;
		
		private string _WHNr;
		
		private EntitySet<Posation> _Posation;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgvIdChanging(int value);
    partial void OnAgvIdChanged();
    partial void OnWHNrChanging(string value);
    partial void OnWHNrChanged();
    #endregion
		
		public WareHouse()
		{
			this._Posation = new EntitySet<Posation>(new Action<Posation>(this.attach_Posation), new Action<Posation>(this.detach_Posation));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AgvId", DbType="Int NOT NULL")]
		public int AgvId
		{
			get
			{
				return this._AgvId;
			}
			set
			{
				if ((this._AgvId != value))
				{
					this.OnAgvIdChanging(value);
					this.SendPropertyChanging();
					this._AgvId = value;
					this.SendPropertyChanged("AgvId");
					this.OnAgvIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WHNr", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string WHNr
		{
			get
			{
				return this._WHNr;
			}
			set
			{
				if ((this._WHNr != value))
				{
					this.OnWHNrChanging(value);
					this.SendPropertyChanging();
					this._WHNr = value;
					this.SendPropertyChanged("WHNr");
					this.OnWHNrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="WareHouse_Posation", Storage="_Posation", ThisKey="WHNr", OtherKey="WHNr")]
		public EntitySet<Posation> Posation
		{
			get
			{
				return this._Posation;
			}
			set
			{
				this._Posation.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posation(Posation entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = this;
		}
		
		private void detach_Posation(Posation entity)
		{
			this.SendPropertyChanging();
			entity.WareHouse = null;
		}
	}
}
#pragma warning restore 1591
